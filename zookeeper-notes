ZooKeeper:
---------

Date: 3-FEB-2016

I know/heard about it from 2 years. But taking notes today.

I felt understanding zookeeper is a challenging thing.(its TOUGH,4-Feb)
	And this knowledge is a must to a grip on distributed systems.

Apache ZooKeeper
	is an effort to 
		develop and maintain 
		
	an open-source server 
		which enables 
			highly-reliable-distributed coordination.

ZooKeeper is a 
	centralized service for 
		  maintaining configuration information
		, naming
		, providing distributed synchronization
		, and providing group services.

All of these kinds of services are used in some form or another by distributed applications.

Difficulty in developing distributed applications/softwares.

	1.Each time they are implemented 
		there is a lot of work that goes into 
			fixing the bugs 
			and race conditions 
				that are inevitable.
	2.Because of the difficulty of implementing 
		these kinds of services, 
			applications initially usually skimp on them,
			which make them brittle 
			in the 
				presence of change 
				and difficult to manage.
	3.Even when done correctly, 
		'different implementations' of these services 
		lead to 
			management complexity 
			when the applications are deployed.

ZooKeeper aims at 
	distilling the essence 
		of these different services 
	into 
	a very simple interface to a centralized coordination service.	

The service itself is distributed and highly reliable.

Consensus
, group management
, and presence protocols 
	will be implemented by the service 
		so that the applications do not need to implement them 	on their own.

Application specific uses 
	of these services will consist of 
		a mixture of specific components of Zoo Keeper 
			and application specific conventions.

ZooKeeper Recipes shows 
	how this simple service can be used 
		to build much more powerful abstractions.































HDP Guide 4:

ZooKeeper also has the following characteristics:

==ZooKeeper is simple==

ZooKeeper is, at its core, a stripped-down filesystem that exposes a few simple
operations, and some extra abstractions such as ordering and notifications.

==ZooKeeper is expressive==
The ZooKeeper primitives are a rich set of building blocks that can be used to build
a large class of coordination data structures and protocols. Examples include: distributed
queues, distributed locks, and leader election among a group of peers.

==ZooKeeper is highly available==
ZooKeeper runs on a collection of machines and is designed to be highly available,
so applications can depend on it. ZooKeeper can help you avoid introducing single
points of failure into your system, so you can build a reliable application.

==ZooKeeper facilitates loosely coupled interactions==
ZooKeeper interactions support participants that do not need to know about one
another. For example, ZooKeeper can be used as a rendezvous mechanism so that
processes that otherwise don’t know of each other’s existence (or network details)
can discover and interact with each other. Coordinating parties may not even be
contemporaneous, since one process may leave a message in ZooKeeper that is read
by another after the first has shut down.

==ZooKeeper is a library==
ZooKeeper provides an open source, shared repository of implementations and
recipes of common coordination patterns. Individual programmers are spared the
burden of writing common protocols themselves (which are often difficult to get
right). Over time, the community can add to and improve the libraries, which is to
everyone’s benefit.

ZooKeeper is highly performant, too. At Yahoo!, where it was created, the throughput
for a ZooKeeper cluster has been benchmarked at over 10,000 operations per second
for write-dominant workloads generated by hundreds of clients.

-------------------------------UNORGANISED POINTS

The Watcher object receives callbacks from ZooKeeper to inform it of various events.



Basic Questions:

What is zookeeper?
What does zookeeper do or facilitate?
What functionalities or services it can offer?
Who are using these services?
What are the components of zookeeper?

Advanced Questions:
How these components work to acheive an objective?
How we can use or optimize these components or services?
How to build a distributed system?



Buzzwords:

Znode
Ensemble
EphemeralNode
SequentialNode
zxid
Watcher
Lock



Bibliography:

https://zookeeper.apache.org/
https://zookeeper.apache.org/doc/trunk/


use custom URL shortner -> zkpr01, zkpr02

